#!/usr/bin/python3

import argparse
import glob
import os
import requests
import select
import socket
import subprocess
import sys

def socket_open_tcp(port):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  result = sock.connect_ex(("localhost",port))
  sock.close()
  return result == 0


def socket_open_unix(unix_socket):
  sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  result = sock.connect_ex(unix_socket)
  sock.close()
  return result == 0


def http_request(url, method, data, headers):
  # TODO(ejalfonso) migrate to requests library, make this a python package
  pass

def x_service_curl(specs, path, headers, data):
  cnt = 0
  for spec in specs:
    if isinstance(spec, int):
        port = spec
        socket_addr = None
        if not socket_open_tcp(port):
            continue
    else:
        port = None
        socket_addr = spec
        if not socket_open_unix(socket_addr):
            continue
    cnt += 1
    if port:
        url = f"http://127.0.0.1:{port}{path}"
        method = "POST" if data else "GET"
        req = requests.Request(method, url, headers=headers, data=data)
        resp = requests.Session().send(req.prepare())
    else:
        cmd = (
            ["curl", "-s", "--no-buffer",
             "--unix-socket", socket_addr,
             f"http://localhost{path}"] +
            (["-d@-"] if data else []) +
            ["-H{key}:{val}" for (key, val) in headers.items()])
        try:
            p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
            if data:
                p.communicate(input=data, timeout=5)
        except TimeoutExpired:
            p.kill()

  return cnt

def main():
  if len(sys.argv) < 2 or set(("-h", "--help")).intersection(sys.argv):
    print ("usage: x-service /PATH [CURL_FLAGS...]")
    exit(1)
  parser = argparse.ArgumentParser()
  parser.add_argument("path", help="the x-service URL path")
  parser.add_argument("-d", "--data", help = "the literal data")
  parser.add_argument("-f", "--file", action="store_true",
                      help = "read data from the given filename")
  parser.add_argument("-i", "--stdin", action="store_true",
                      help = "read POST data from stdin")
  parser.add_argument("-H", "--headers", nargs="+", default=[],
                      help = "list of headers as KEY:VALUE pairs")

  args=parser.parse_args()

  if args.file:
      with open(args.file, "r") as fh:
          data = fh.read()
  elif args.data:
      data = args.data.encode()
  elif args.stdin:
      data = sys.stdin.buffer.read()

  headers = dict(((name, val) for (name, val)
                  in os.environ.items()
                  if name.startswith("STUMPWM")))

  for header in args.headers:
      k, v = header.split(':')
      headers[k] = v

  sockets = glob.glob("/tmp/.x-service-*.sock") + [1958, 1959]
  if x_service_curl(sockets, args.path, headers, data):
      return 0
  print(f"no ports or sockets found: {sockets}")

if __name__ == "__main__":
  exit(main())

# Local Variables:
# mode: python-mode
# End:
