#!/usr/bin/python3

import glob
import os
import select
import socket
import subprocess
import sys

def socket_open_tcp(port):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  result = sock.connect_ex(("localhost",port))
  sock.close()
  return result == 0


def socket_open_unix(unix_socket):
  sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  result = sock.connect_ex(unix_socket)
  sock.close()
  return result == 0


def http_request(url, method, data, headers):
  # TODO(ejalfonso) migrate to requests librart, make this a python package
  pass

def x_service_curl(specs, path, rest, stdin_bytes):
  cnt = 0
  for spec in specs:
    if isinstance(spec, int):
        port = spec
        socket = None
    else:
        port = None
        socket = spec
    is_open = socket_open_tcp(port) if port else socket_open_unix(socket)
    if not is_open:
        continue
    cnt += 1
    headers = [f"-H{name}:{val}" for (name, val) in os.environ.items()
               if name.startswith("STUMPWM")]
    if port:
        url = f"localhost:{port}{path}"
        cmd = ["timeout", "5s", "curl", "-s", url] + headers + rest
    else:
        cmd = ["timeout", "5s", "curl", "-s", "--no-buffer",
               "--unix-socket", socket,
               f"http://localhost{path}"] + headers + rest
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    if stdin_bytes:
        p.communicate(input=stdin_bytes)
  return 0 if cnt else 1

def maybe_read_stdin():
    if select.select([sys.stdin, ], [], [], 0.0)[0]:
        return sys.stdin.buffer.read()

def main():
  if len(sys.argv) < 2 or set(("-h", "--help")).intersection(sys.argv):
    print ("usage: x-service /PATH [CURL_FLAGS...]")
    exit(1)
  path = sys.argv[1]
  sockets = glob.glob("/tmp/.x-service-*.sock") + [1959]
  rest = sys.argv[2:]
  stdin_bytes = maybe_read_stdin()
  return x_service_curl(sockets, path, rest, stdin_bytes)

if __name__ == "__main__":
  exit(main())

# Local Variables:
# mode: python-mode
# End:
