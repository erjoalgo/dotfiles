#!/usr/bin/python3

import argparse
import glob
import logging
import os
import requests
import requests_unixsocket
import select
import socket
import subprocess
import sys

def socket_open_tcp(port: int):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  result = sock.connect_ex(("localhost",port))
  sock.close()
  return result == 0


def socket_open_unix(unix_socket: str):
  sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  result = sock.connect_ex(unix_socket)
  sock.close()
  return result == 0

def peek_string(s: str, peek: int):
    if len(s) <= peek:
        return s
    return f"{s[:peek]}..."

def x_service_curl(specs: list, path: str, headers: dict[str:str], data: bytes):
  success_count = 0
  for spec in specs:
    if isinstance(spec, int):
        port = spec
        if not socket_open_tcp(port):
            continue
        url = f"http://127.0.0.1:{port}{path}"
        session = requests.Session()
    else:
        socket_addr = spec
        if not socket_open_unix(socket_addr):
            continue
        host_encoded = socket_addr.replace("/", "%2F")
        url = f"http+unix://{host_encoded}{path}"
        session = requests_unixsocket.Session()
    method = "POST" if data else "GET"
    logging.debug(f"{method} {url}" +
                  (f" <<< {peek_string(data, 100)}" if data else ""))

    req = requests.Request(method, url, headers=headers, data=data)
    resp = session.send(req.prepare())
    if resp.status_code != 200:
        logging.error(resp.text)
    else:
        print(resp.text)
        success_count += 1

  return success_count

def main():
  if len(sys.argv) < 2 or set(("-h", "--help")).intersection(sys.argv):
    print ("usage: x-service /PATH [CURL_FLAGS...]")
    exit(1)
  parser = argparse.ArgumentParser()
  parser.add_argument("path", help="the x-service URL path")
  parser.add_argument("-d", "--data", help = "the literal data")
  parser.add_argument("-f", "--file", action="store_true",
                      help = "read data from the given filename")
  parser.add_argument("-i", "--stdin", action="store_true",
                      help = "read POST data from stdin")
  parser.add_argument("-H", "--headers", nargs="+", default=[],
                      help = "list of headers as KEY:VALUE pairs")
  parser.add_argument("-v", "--verbose", action="store_true",
                      help = "verbose logging")

  args=parser.parse_args()

  if args.file:
      with open(args.file, "r") as fh:
          data = fh.read()
  elif args.data:
      data = args.data.encode()
  elif args.stdin:
      data = sys.stdin.buffer.read()
  else:
      data = None

  if args.verbose:
      logging.basicConfig(level=logging.DEBUG)
  else:
      logging.basicConfig(level=logging.WARN)

  headers = dict(((name, val) for (name, val)
                  in os.environ.items()
                  if name.startswith("STUMPWM")))

  for header in args.headers:
      k, v = header.split(':')
      headers[k] = v

  sockets = glob.glob("/tmp/.x-service-*.sock") + [1958, 1959]
  if x_service_curl(sockets, args.path, headers, data) == 0:
      raise Exception(f"no ports or sockets found: {sockets}")
  return 0

if __name__ == "__main__":
  exit(main())

# Local Variables:
# mode: python-mode
# End:
