(defcommand scrot-sub-take (name &optional eog)
    ((:string "enter name of scrot: ")
     (:string nil ))
  (let* (
	 (top-left (read-mouse-coord-interactive "place mouse in one corner then Ret: "))
	 (bottom-right (read-mouse-coord-interactive "place mouse in diagonally opposite corner, then Ret: "))
	 (fn (format nil  "/home/ealfonso/Downloads/~A" name))
	 )
    (sub-scrot fn top-left bottom-right)
    (when (or t eog)
      (eog fn))))
(defun read-mouse-coord-interactive (&optional prompt)
  (echo (or prompt "place mouse and press enter: "))
  (read-one-char (current-screen))
  (get-mouse-coords))
(defun sub-scrot (fn corner-1 corner-2)
  (destructuring-bind
	((x1 y1) (x2 y2))
      (list corner-1 corner-2)
    (let* (
	   (w (abs (- x1 x2)))
	   (h (abs (- y1 y2)))
	   ;;(xy-top-left )
	   (x x1)
	   (y y1)
	   (cmd (format nil "shutter -s ~D,~D,~D,~D -o ~A -e &" x y w h fn))
	   )
      (echo cmd)
      (print cmd)
      (hide-message-windows)
      (run-shell-command cmd t))))
(defun eog (fn)
  (run-shell-command (format nil  "eog '~A'" fn) nil ))
(defun get-mouse-coords ()
  (let* ((out (run-shell-command "xdotool getmouselocation" t)))
    (cl-ppcre:register-groups-bind (x y) ("x:([0-9]+) y:([0-9]+)" out)
	  (mapcar 'parse-integer (list x y)))))
