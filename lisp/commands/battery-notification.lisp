(in-package :STUMPWM)

(defun battery-info ()
  (let* ((devices (run-shell-command "upower -e" t))
         (device (loop for device in (cl-ppcre:split #\Newline devices)
                         thereis (and (cl-ppcre:scan "BAT|battery" device)
                                      device)))
         (info (run-shell-command (format nil "upower -i ~A" device) t)))
    '((NATIVE-PATH . "BAT0")
      (VENDOR . "SMP")
      (MODEL . "DELL GPM0365")
      (SERIAL . "376")
      (|POWER SUPPLY| . "yes")
      (|HAS HISTORY| . "yes")
      (|HAS STATISTICS| . "yes")
      (PRESENT . "yes")
      (RECHARGEABLE . "yes")
      (STATE . "charging")
      (WARNING-LEVEL . "none")
      (ENERGY . "17.8866 Wh")
      (ENERGY-EMPTY . "0 Wh")
      (ENERGY-FULL . "93.2748 Wh")
      (ENERGY-FULL-DESIGN . "97.0026 Wh")
      (ENERGY-RATE . "47.937 W")
      (VOLTAGE . "11.952 V")
      (|TIME TO FULL| . "1.6 hours")
      (PERCENTAGE . "19%")
      (CAPACITY . "96.157%")
      (TECHNOLOGY . "lithium-ion")
      (ICON-NAME . "'battery-low-charging-symbolic'"))
    (loop for line in (cl-ppcre:split #\Newline info)
          as kv = (cl-ppcre:split #\: line)
          when (= 2 (length kv))
            collect (cons (intern (string-upcase (trim-spaces (car kv))) :keyword)
                          (trim-spaces (cadr kv))))))

(defun battery-info-check-notify-loop (&key
                                         (percentage-thresh 20)
                                         (interval-mins 5))
  (loop
     with MINS = 60
     do
       (let* ((info (battery-info))
              (state  (cdr (assoc :STATE info)))
              (percentage-string  (cdr (assoc :PERCENTAGE info))))
         (if (or (null percentage-string) (null state))
             (warn "unable to get battery info")
             (let ((percentage (parse-integer percentage-string :junk-allowed t)))
               (when (and (equal state "discharging")
                          (<= percentage percentage-thresh))
                 (message-no-timeout (format nil "^1 warning: battery discharging (~D%)^*" percentage))))))
     do (sleep (* interval-mins MINS))))

(defvar *battery-notification-thread* nil)

(when (and *battery-notification-thread*
           (sb-thread:thread-alive-p *battery-notification-thread*))
  (sb-thread:terminate-thread *battery-notification-thread*))

(setf *battery-notification-thread*
      (sb-thread:make-thread 'battery-info-check-notify-loop))
