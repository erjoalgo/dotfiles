;; -*- mode: lisp; -*-
(in-package :stumpwm)

(defun echo-format (fmt &rest args)
  (let* ((msg (apply 'format nil (cons fmt args))))
    (echo msg)
    msg))

(defparameter *init-errs-list* nil )
(defvar ex)
(defun load-files-verbose (loader-fun &rest fns)
  (loop for fn in fns
	as str = (if (pathnamep fn) (namestring fn) fn)
	
	do
	(echo-format "loading file: ~A..." str)
	(handler-case
	 (progn
	   (funcall loader-fun fn)
	   (echo-format "successful load of ~A" str))
	 (error (err)
		(setq *init-errs-list*
		      (cons (echo-format "error loading: ~A~%: '~A'" fn err)
			    *init-errs-list*))))))
  

(defcommand load-cmd (fn)
    ((:shell "Enter file to load: "))
  "load a file"
  (echo (format nil "loading ~A" fn))
  (load fn))

(defparameter HOME
  (concat (sb-posix:getenv "HOME") "/"))

(defparameter STUMPWM-TOP
  (merge-pathnames  "repos/stumpwm/lisp/" (user-homedir-pathname)))

(defun expand-user (fn)
  (cl-ppcre:regex-replace "^~/" fn HOME ))

(load-files-verbose
 'load
 (merge-pathnames "util.lisp" STUMPWM-TOP)
 (merge-pathnames ".sbclrc" HOME))




(progn
  (fset join-path (reverse-fun-args 'merge-pathnames))
  (fset dir-merger (curry 'curry 'join-path))
  (fset stumpwm-merger (dir-merger STUMPWM-TOP))
  (fset stumpwm-loader (compose 'load 'stumpwm-merger)))

;;cleaner way to do this, via ~/.xinitrc
;;(run-shell-command (concat (namestring STUMPWM-TOP) "xmodmap/xmodmap_init.sh"))
;;(run-shell-command (concat (namestring STUMPWM-TOP) ".my_startups.sh" " &" ))


(defvar *browser-classes*
  '("Iceweasel" "Firefox"  "Navigator"  "Chromium" "chromium-browser"))
(load-files-verbose
 'stumpwm-loader
 "sensitive/sensitive.el"
 "window-utils.lisp"
 "decorations.lisp"
 "defcommands.lisp"
 "per-window-bindings.lisp"
 "tsv-db.lisp"
 "mozrepl.lisp"
 "url-launcher.lisp"

 ;;in this order
 "run-raise-programs.lisp"
 "per-window-bindings.lisp"
 "top-map-bindings.lisp"
 
 "commands-map.lisp"
 "swank-loader.lisp"
 )

(defun basename (fn)
  (if (equal fn "/") fn
  (multiple-value-bind (m res)
      (ppcre::scan-to-strings ".*?/([^/]*)/?$" fn )
    (declare (ignore m))
    (and res (aref res (1- 1))))))

;;(fset regular-file-p (compose 'not 'pathname-name))
(fset regular-file-p 'pathname-name);; must have trailing slash

(defun regular-file-lister (full-path dir )
  (let* ((list (remove-if-not 'regular-file-p
			      (list-directory dir))))
    (mapcar (compose (if full-path 'identity 'basename) 'namestring ) list)))


(fset prepend-dir (lambda (dir) (curry 'join-path dir)))

(defvar *load-path-extra*
  (flatten (list 
	    (mapcar (prepend-dir STUMPWM-TOP) (list "commands")))))



(apply 'load-files-verbose 'stumpwm-loader
       (flatten (mapcar (curry 'regular-file-lister t) *load-path-extra*)))

;;(setq cmu (file-string (stumpwm-merger "sensitive/cmu")))


(defcommand load-some-file (&optional fn) ((:string nil ))
  "load a file" 
  (in-package :stumpwm)
  (let* ((fn (or fn (completing-read (current-screen)
		   "enter stumpwm file to load (completing read): "
		   ;;(regular-file-lister (namestring STUMPWM-TOP))
		   (regular-file-lister nil STUMPWM-TOP) ))))
    (if fn
	(load-files-verbose 'stumpwm-loader fn)
	(echo "nothing to load"))))

(echo "finished loading .stumpwmrc")
  
;;https://stumpwm.github.io/git/stumpwm-git_16.html
