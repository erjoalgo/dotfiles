;; -*- mode: lisp; -*-
(in-package :stumpwm)

;; sbclrc gives us quickload
(load (merge-pathnames ".sbclrc" (user-homedir-pathname)))

(defun load-stumpwmrc-file (relative-path)
  (let ((source-directory
          (or *load-truename*
              (merge-pathnames #P".stumpwmrc.d/lisp/"
                               (user-homedir-pathname)))))
    (load (merge-pathnames relative-path source-directory))))

(load-stumpwmrc-file "erjoalgo-stumpwmrc.asd")
(ql:quickload :erjoalgo-stumpwmrc)

(defvar *init-errors* nil)

(defmacro safe-init-sexp (&body body)
  "evaluate an expression, handling and recording errors"
  `(handler-case
       (progn ,@body)
     (error (err)
       (push (list ',body err) *init-errors*)
       (message-wrapped "error while loading: ~A~%: '~A'" ',body err))))

(with-message-queuing t
  ;; file may not exist
  (safe-init-sexp (load-stumpwmrc-file "defs-secret.lisp"))
  (swank-start)
  (xinitrc-init)
  ;; TODO remove side-effects. add "init" method
  (load-stumpwmrc-file "top-map-bindings.lisp")
  (init-top-map-bindings)
  (url-launcher-init)
  (text-shortcuts-init)
  (brightness-init)
  (safe-init-sexp (contacts:contacts-load)) ;; contacts file may not exist
  (x-service:start 1959)
  ;; TODO remove these
  (defvar *battery-notification-thread*)
  (defvar *sms-fanout-reconnect-thread*)
  (def-thread-start *battery-notification-thread*
    (battery-info-check-notify-loop))
  (def-thread-start *sms-fanout-reconnect-thread*
    (sms-fanout-client:reconnect-loop))
  (setf *startup-message* nil)
  (startup-apps-run)
  (safe-init-sexp (assert (psym-records *search-engine-persistent-alist*)))
  (decorations-init))

;; (sb-thread:terminate-thread *sms-fanout-reconnect-thread*)
