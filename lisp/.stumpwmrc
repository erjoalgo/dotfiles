;; -*- mode: lisp; -*-
(in-package :stumpwm)

(load (merge-pathnames ".sbclrc" (user-homedir-pathname)))


(defparameter *retain-messages-p* nil
  "when non-nil, retain old messages in addition to new one")

(defun message (fmt &rest args)
  "rewrite message to support option to retain older messages"
  (let ((msg (apply 'format nil fmt args)))
    (if *retain-messages-p*
        (echo-string-list (current-screen)
                          (cons msg (screen-current-msg (current-screen))))
        (echo-string (current-screen) msg))))

(defmacro with-elapsed-time (elapsed-time-var form &body body)
  (let ((start-time-sym (gensym "start-time")))
    `(let ((,start-time-sym (get-internal-real-time)))
       ,form
       (let ((,elapsed-time-var (- (get-internal-real-time) ,start-time-sym)))
         ,@body))))

(defparameter *init-errs* nil )
(defun load-safe (pathname)
  "load file, trapping and recording errors"
  ;; (message "loading file: ~A..." pathname)
  (handler-case
      (progn
        (with-elapsed-time elapsed-time (load pathname)
	  (message "loaded ~A in ~Dms" (pathname-name pathname) elapsed-time)))
    (error (err)
      (message "error loading: ~A~%: '~A'" pathname err)
      (push (cons pathname err) *init-errs*))))

(defparameter STUMPWM-TOP
  ;; TODO find current file, e.g. __file__
  ;; (UIOP/LISP-BUILD:CURRENT-LISP-FILE-PATHNAME)
  (merge-pathnames  ".stumpwmrc.d/lisp/" (user-homedir-pathname)))

(defparameter browser-classes
  '("Iceweasel" "Firefox"  "Navigator"  "Chromium" "chromium-browser"
    "Tor Browser" "Google-chrome" "Firefox-esr"))


(defparameter browser-name
  (or
   (pathname-name
    (string-trim '(#\newline)
                 (run-shell-command "which chromium chromium-browser chrome google-chrome" t)))
   "chromium"))

(defparameter load-list
  '(
    "util.lisp"
    "xinitrc.lisp"
    "sensitive/sensitive.el"
    "decorations.lisp"
    "defcommands.lisp"
    "tsv-db.lisp"
    "mozrepl.lisp"
    "url-launcher.lisp"

    "run-raise-programs.lisp"
    "per-window-bindings.lisp"
    "top-map-bindings.lisp"

    "commands-map.lisp"
    "swank-loader.lisp"
    "correct-screen.lisp"
    "brightness.lisp"
    "startup-apps.lisp")

  "defines components to load and their order")

(let ((*retain-messages-p* t))
  (loop for filename in load-list
      do (load-safe (merge-pathnames
                     filename
                     STUMPWM-TOP))))


(message "finished loading .stumpwmrc. ~D errors"
	 (length *init-errs*))

(defvar load-extra-directories
  '("commands"))

'(dolist (directory-name load-extra-directories)
  (dolist (pathname (list-directory
                     (merge-pathnames directory-name STUMPWM-TOP)))
    (when (pathname-name pathname)
      ;; is file
      (load-safe pathname))))

;; (message "finished loading .stumpwmrc. ~D errors" (length *init-errs*))

(defmacro alias (to fn)
  `(setf (fdefinition ',to) #',fn))
(alias last-msg-show last-msg-print)
(alias print-last-msg last-msg-print)

;;manual
;;https://stumpwm.github.io/git/stumpwm-git_16.html
