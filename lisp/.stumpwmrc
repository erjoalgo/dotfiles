;; -*- mode: lisp; -*-
(in-package :stumpwm)

(load (merge-pathnames ".sbclrc" (user-homedir-pathname)))

(defun echo-format (fmt &rest args)
  (let* ((msg (apply 'format nil (cons fmt args))))
    (echo msg)
    msg))

(defparameter *init-errs* nil )
(defvar ex)
(defun load-files-verbose (loader-fun &rest fns)
  (loop for fn in fns
	as str = (if (pathnamep fn) (namestring fn) fn)

	do
	(echo-format "loading file: ~A..." str)
	(handler-case
	 (progn
	   (funcall loader-fun fn)
	   (echo-format "successful load of ~A" str))
	 (error (err)
		(setq *init-errs*
		      (cons (echo-format "error loading: ~A~%: '~A'" fn err)
			    *init-errs*))))))


(defcommand load-cmd (fn)
    ((:shell "Enter file to load: "))
  "load a file"
  (echo (format nil "loading ~A" fn))
  (load fn))

(defparameter STUMPWM-TOP
  (merge-pathnames  ".stumpwmrc.d/lisp/" (user-homedir-pathname)))

(defun expand-user (fn)
  (cl-ppcre:regex-replace "^~/" fn (user-homedir-pathname)))

(load-files-verbose
 'load
 (merge-pathnames "util.lisp" STUMPWM-TOP))


(defun stumpwm-merger (rel)
  (merge-pathnames rel STUMPWM-TOP))

(defun stumpwm-loader (fn)
  (load (stumpwm-merger fn)))

(defparameter *browser-classes*
  '("Iceweasel" "Firefox"  "Navigator"  "Chromium" "chromium-browser"
    "Chromium-browser" "Tor Browser" "Google-chrome"))

(defun coalesce (a b)
  (if (zerop (length a)) b a))

(defparameter *browser-name*
  (coalesce (string-trim '(#\newline)
	       (run-shell-command
		"basename $(which chromium chromium-browser chrome)" t))
            "chromium"))

(load-files-verbose
 'stumpwm-loader
 "sensitive/sensitive.el"
 "decorations.lisp"
 "defcommands.lisp"
 "tsv-db.lisp"
 "mozrepl.lisp"
 "url-launcher.lisp"

 ;;in this order
 "run-raise-programs.lisp"
 "per-window-bindings.lisp"
 "top-map-bindings.lisp"

 "commands-map.lisp"
 "swank-loader.lisp"
 "correct-screen.lisp"
 "brightness.lisp"
 )

(defun list-regular-files (dir)
  (remove-if-not (lambda (fn) (pathname-name fn)) (list-directory dir)))

(defvar *load-path-extra*
  (mapcar (lambda (rel) (merge-pathnames rel STUMPWM-TOP))
	  (list "commands")))


(dolist (extra-path *load-path-extra*)
	   (dolist (extra-path-fn (list-regular-files extra-path))
	     (load-files-verbose #'stumpwm-loader extra-path-fn)))

(defcommand load-some-file (&optional fn) ((:string nil ))
  "load a file"
  (in-package :stumpwm)
  (let* ((fn (or fn (completing-read (current-screen)
		   "enter stumpwm file to load (completing read): "
		   ;;(regular-file-lister (namestring STUMPWM-TOP))
		   (mapcar 'file-namestring (list-regular-files STUMPWM-TOP)) ))))
    (if fn
	(load-files-verbose 'stumpwm-loader fn)
	(echo "nothing to load"))))

(if (zerop (length (run-shell-command "which xscreensaver" t)))
    (error "xscreensaver not installed")
    (when (zerop (length (run-shell-command "pidof xscreensaver" t)))
      (run-shell-command "xscreensaver &" nil)))

(message "finished loading .stumpwmrc. ~D errors"
	 (length *init-errs*))

(defmacro alias (to fn)
  `(setf (fdefinition ',to) #',fn))

(alias last-msg-show last-msg-print)
(alias print-last-msg last-msg-print)

;;manual
;;https://stumpwm.github.io/git/stumpwm-git_16.html
