;; -*- mode: lisp; -*-
(in-package :stumpwm)

(defvar *init-errors* nil)

(defvar *stumpwm-log-filename* #P"/tmp/stumpwm.log")

(defvar *stumpwm-log-stream* nil)

(defmacro safe-sexp (&body body)
  "Evaluate an expression, handling and recording errors."
  `(handler-case
       (progn ,@body)
     (error (err)
       (push (list ',body err) (cdr (last *init-errors*)))
       (let ((message-fn (if (fboundp 'message-wrapped)
                             'message-wrapped
                             'message))
             (msg (format nil "error while loading: ~A~%: '~A'" ',body err)))
         (format t "~A" msg)
         (funcall message-fn "~A" msg)
         ;; allow the user to see the error before it is overwritten
         (sleep 5)
         (handler-case
             (when *stumpwm-log-filename*
               (unless *stumpwm-log-stream*
                 (setf *stumpwm-log-stream*
                       (open *stumpwm-log-filename*
                             :direction :output
                             :if-exists :append
                             :if-does-not-exist :create)))
               (format *stumpwm-log-stream* "~A" msg))
           (error (err)
             (format t "error logging to ~A: ~A" *stumpwm-log-filename* err)
             (push err *init-errors*)))
         err))))

;; without message wrapping, we won't be able to read long messages
(defun wrap-text (text &optional max-chars-per-line)
  (loop for text in (ppcre:split #\Newline text)
        with chunks
        do
           (loop with len = (length text)
                 with idx = 0
                 while (< idx len)
                 as new-idx = (+ idx max-chars-per-line)
                 do (push (subseq text idx (min len new-idx)) chunks)
                 do (setf idx new-idx))
        finally (return (nreverse chunks))))

(defun message-wrapped (fmt &rest args)
  (let* ((text (apply #'format nil fmt args))
         (screen (current-screen))
         (pixels-per-char (text-line-width
                           (screen-font screen) "a"
                           :translate #'translate-id))
         (pixels-per-line (screen-width screen))
         (chars-per-line (floor pixels-per-line pixels-per-char))
         (chars-per-line (round (* chars-per-line .8))))
    (if (zerop chars-per-line)
        (progn
          (warn "no usable displays?")
          (STUMPWM::message (apply #'format nil fmt args)))
        (progn
          (assert (> chars-per-line 0))
          (echo-string-list screen (wrap-text text chars-per-line))))))

;; apply font size options
(defun style-options-init (&key debugging (font-size 40))
    (setq *message-window-gravity* :center)
    (setq *input-window-gravity* :center)
    (setq *run-or-raise-all-groups* nil)
    (setq *timeout-wait* (if debugging 120 5))
    (set-font (format nil "-*-*-bold-r-*-*-~D-240-*-*-*-*-*-*"
		      font-size))
    (define-key *input-map* (kbd "C-v") 'input-yank-selection))

(defun source-shell-vars (filename)
  (ppcre:do-register-groups (key val)
      ("(?m)^([A-Z_]+)=(.*)$"
       (with-output-to-string (string)
         (sb-ext:run-program
          "bash"
          `("-ac" ,(format nil "source ~A; env" filename))
          :search t
          :wait t
          :output string
          :error string)
         string))
    (format t "setting ~A to ~A~%" key val)
    (sb-posix:setenv key val 1)))

(source-shell-vars #P"~/.profile")

;; sbclrc gives us quickload
(load #P"~/.sbclrc")

(ql:quickload :swank)

(defun start-swank (&key (port 4005))
  (let ((conn (car (symbol-value (find-symbol "*CONNECTIONS*" :SWANK)))))
  (if conn
      (message "swank appears to already be running: ~A"
               (slot-value conn (intern "SOCKET" :SWANK)))
      (progn
        (message "attempting to start swank at port ~A" port)
        (safe-sexp
          (progn
            (funcall (find-symbol "CREATE-SERVER" "SWANK")
                     :port port :dont-close t)
            (message "swank started at port ~A" port)))))))

(safe-sexp (start-swank))

(style-options-init :debugging t)

(defun load-stumpwmrc-file (relative-path)
  (let ((source-directory
          (or *load-truename*
              "~/.stumpwmrc.d/lisp/")))
    (load (merge-pathnames relative-path source-directory))))

(safe-sexp
  (load-stumpwmrc-file "erjoalgo-stumpwmrc.asd"))

(safe-sexp
  (ql:quickload :erjoalgo-stumpwmrc))

(safe-sexp (funcall (find-symbol "INIT" "STUMPWM")))
