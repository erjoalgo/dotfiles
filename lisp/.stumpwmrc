;; -*- mode: lisp; -*-
(in-package :stumpwm)

;; (proclaim '(optimize debug))

(load (merge-pathnames ".sbclrc" (user-homedir-pathname)))


(defvar log-idx 0)
(defun echo-append (&rest msgs)
  (let* ((numbered (loop for msg in msgs collect (format nil "~D. ~A" (incf log-idx) msg)))
         (to-echo (append numbered (screen-current-msg (current-screen)))))
    (echo-string-list (current-screen) to-echo)))

(defmacro with-elapsed-time (elapsed-time-var form &body body)
  (let ((start-time-sym (gensym "start-time")))
    `(let ((,start-time-sym (get-internal-real-time)))
       ,form
       (let ((,elapsed-time-var (- (get-internal-real-time) ,start-time-sym)))
         ,@body))))

(defparameter *init-errs* nil )
(defun load-safe (pathname)
  "load file, trapping and recording errors"
  ;; (message "loading file: ~A..." pathname)
  (handler-case
      (progn
        (with-elapsed-time elapsed-time (load pathname)
	  (message "successful load of ~A" pathname)))
    (error (err)
      (echo-append (format nil "error loading: ~A~%: '~A'" pathname err))
      (push (cons pathname err) *init-errs*))))

(defcommand load-cmd (fn)
    ((:shell "Enter file to load: "))
  "load a file"
  (echo (format nil "loading ~A" fn))
  (load fn))

(defparameter STUMPWM-TOP
  (merge-pathnames  ".stumpwmrc.d/lisp/" (user-homedir-pathname)))

(defparameter *browser-classes*
  '("Iceweasel" "Firefox"  "Navigator"  "Chromium" "chromium-browser"
    "Chromium-browser" "Tor Browser" "Google-chrome" "Firefox-esr"))

(defun coalesce (a b)
  (if (zerop (length a)) b a))

(defparameter *browser-name*
  (coalesce (string-trim '(#\newline)
	       (run-shell-command
		"basename $(which chromium chromium-browser chrome google-chrome)" t))
            "chromium"))

(load-files-verbose
 'stumpwm-loader
 "xinitrc.lisp"
 "sensitive/sensitive.el"
 "decorations.lisp"
 "defcommands.lisp"
 "tsv-db.lisp"
 "mozrepl.lisp"
 "url-launcher.lisp"

 ;;in this order
 "run-raise-programs.lisp"
 "per-window-bindings.lisp"
 "top-map-bindings.lisp"

 "commands-map.lisp"
 "swank-loader.lisp"
 "correct-screen.lisp"
 "brightness.lisp"
 "startup-apps.lisp"
 )

(defun list-regular-files (dir)
  (remove-if-not (lambda (fn) (pathname-name fn)) (list-directory dir)))

(defvar *load-path-extra*
  (mapcar (lambda (rel) (merge-pathnames rel STUMPWM-TOP))
	  (list "commands")))


(dolist (extra-path *load-path-extra*)
	   (dolist (extra-path-fn (list-regular-files extra-path))
	     (load-files-verbose #'stumpwm-loader extra-path-fn)))

(defcommand load-some-file (&optional fn) ((:string nil ))
  "load a file"
  (in-package :stumpwm)
  (let* ((fn (or fn (completing-read (current-screen)
		   "enter stumpwm file to load (completing read): "
		   ;;(regular-file-lister (namestring STUMPWM-TOP))
		   (mapcar 'file-namestring (list-regular-files STUMPWM-TOP)) ))))
    (if fn
	(load-files-verbose 'stumpwm-loader fn)
	(echo "nothing to load"))))

(if (zerop (length (run-shell-command "which xscreensaver" t)))
    (error "xscreensaver not installed")
    (when (zerop (length (run-shell-command "pidof xscreensaver" t)))
      (run-shell-command "xscreensaver &" nil)))

(message "finished loading .stumpwmrc. ~D errors"
	 (length *init-errs*))

(defmacro alias (to fn)
  `(setf (fdefinition ',to) #',fn))

(alias last-msg-show last-msg-print)
(alias print-last-msg last-msg-print)

;;manual
;;https://stumpwm.github.io/git/stumpwm-git_16.html
