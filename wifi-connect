#!/bin/bash

while getopts "of:hp:e:m:aE:" OPT; do
    case ${OPT} in
	o)
	    # flag to disregard any existing password
	    OVERWRITE="true"
	    ;;
	e)
	    # connect to given essid
	    # required when connecting to a hidden essid
	    ESSID="${OPTARG}"
	    ;;
	p)
	    # the wpa password
	    PASS="${OPTARG}"
	    ;;
	m)
	    # one-character flag to be passed to macchanger
	    MACCHANGE_OPT="${OPTARG}"
	    ;;
	i)
	    # wireless interface
	    IFACE="${OPTARG}"
	    ;;
	a)
	    # flag to prompt for essid, even if matching entry exists
	    ASK_ESSID="true"
	    ;;
	E)
	    # sets the network's encryption
	    # required when connecting to a hidden essid
	    ENC="${OPTARG}"
	    ;;
	h)
	    less $0
	    exit 0
	    ;;
    esac
done

if ! command -v iwlist > /dev/null \
	|| ! command -v iwconfig > /dev/null
then
    echo "missing wireless-tools" && exit ${LINENO}
fi


IFACE=${IFACE:-$(ifconfig -a | grep -Po '^wlan[0-9]' | head -1)}

if test 0 -ne $? || test -z ${IFACE}; then
    echo "wireless iface not found" && exit ${LINENO}
fi

if test -n "${MACCHANGE_OPT}"; then
    if ! command -v macchanger &> /dev/null; then
	echo "macchanger not installed" && exit ${LINENO}
    fi
    sudo ifconfig ${IFACE} down || exit ${LINENO}
    sudo macchanger "-${MACCHANGE_OPT}" "${IFACE}" #|| exit ${LINENO}
fi

sudo ifconfig ${IFACE} up

SCAN_RESULTS_FN=/tmp/wifi-scan-results

TRIES=7
if test -n "${ENC}" -a -n "${ESSID}"; then
    # no need to scan, we know the ESSID and the encyrption
    # need to skip scan to not err when connecting to hidden essid
    TRIES=0
    ESSIDS="${ESSID}"
fi

for i in $(seq ${TRIES}); do
    IWLIST_OUT=$(sudo iwlist ${IFACE} scan |& tee ${SCAN_RESULTS_FN})
    ESSIDS=$(grep ESSID <<< "${IWLIST_OUT}" | sed 's/.*ESSID:"\(.*\)".*/\1/g')
    if test 0 -ne $? || test -z "${ESSIDS}"; then
	if test $i -eq ${TRIES}; then
	    echo "couldn't scan for wireless networks or no networks available" && exit ${LINENO}
	else
	    echo "retrying scan..." && sleep 1
	fi
    else
	break
    fi
done


NETWORKS_DIR=/etc/wpa-connect

COUNT=$(wc -l <<< "${ESSIDS}")
case ${COUNT} in
    1)
	ESSID="${ESSIDS}"
	;;
    0)
	echo "no networks found" && exit ${LINENO}
	;;
    *)
	if test -z "${ESSID}"; then
	    COMM=$(comm -12 <(ls -1 "${NETWORKS_DIR}" | sort) <(sort <<< "${ESSIDS}"))
	    if test -z "${ASK_ESSID}" -a 1 -eq $(wc -l <<< "${COMM}") -a -n "${COMM}"; then
		ESSID="${COMM}"
	    else
		OLDIFS=$IFS
		IFS=$'\n'
		select ESSID in ${ESSIDS}; do
		    break
		done
		IFS=$OLDIFS
	    fi
	elif ! grep -F "${ESSID}" <<< "${ESSIDS}"; then
	     echo -e "specified essid '${ESSID}' not found in:\n${ESSIDS}" && exit ${LINENO}
	fi
esac

echo "selected ${ESSID}"
ENC=${ENC:-$(grep -B1 -F "${ESSID}" <<< "${IWLIST_OUT}"  | head -1 \
	 | sed 's/.*Encryption key:\(.*\)/\1/')}


sudo pkill -e wpa_supplicant
sudo pkill -e dhclient

cd ${NETWORKS_DIR}
test -d ${NETWORKS_DIR} || sudo mkdir -p ${NETWORKS_DIR}

case "${ENC}" in
    on) #assume wpa
	if ! command -v wpa_supplicant > /dev/null \
		|| ! command -v wpa_passphrase > /dev/null \
		|| ! command -v expect > /dev/null; then
	    echo "missing wpasupplicant or expect" && exit ${LINENO}
	fi


	if test ! -f "${ESSID}" -o -n "${OVERWRITE}"; then
	    if test -z "${PASS}"; then
		read -p "enter password for ${ESSID}: " PASS
	    fi
	    wpa_passphrase "${ESSID}" "${PASS}" | sudo tee "${ESSID}"
	fi

	cat <<EOF | expect -df -
set timeout -1
spawn sudo wpa_supplicant -i ${IFACE} -c "${ESSID}" -D nl80211,wext &
# expect "Established DTLS connection"
# expect -re "CTRL-EVENT-CONNECTED - Connection to 00:1a:1e:87:3c:01 completed"
# expect -re "CTRL-EVENT-CONNECTED - Connection to [0-9a-z:]+ completed"
expect -re "CTRL-EVENT-CONNECTED - Connection to .* completed"
disconnect
exit

EOF
	# sudo wpa_supplicant -i ${IFACE} -c ${ESSID} -D nl80211,wext &
	# sleep 10

	echo "post CTRL-EVENT-CONNECTED expect"
	;;

    off)
	sudo iwconfig ${IFACE} essid "${ESSID}" || exit ${LINENO}
	test -f "${ESSID}" || sudo touch "${ESSID}"
	;;
    *)
	echo "unknown encryption ${ENC}" && exit ${LINENO}
	;;
esac

sudo dhclient -v ${IFACE} || exit ${LINENO}
