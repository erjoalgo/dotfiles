#!/bin/bash
function find-iregex {
    find ${PWD} -iregex ".*$*.*" 
}

function find-name {
    dir=${PWD}
    find ${dir} -name "${1}" 
}

function abspath {
     echo $(readlink -f "${1}")
}

function lnabs {
    #http://stackoverflow.com/questions/4187210/convert-relative-symbolic-links-to-absolute-symbolic-links
    relative=$1
    shift
    ln -sf "$(readlink -f "${relative}")" "$*"
}

function lnabs_t {
    target=$1
    relative=$2
    shift
    shift
    ln -s -t ${target} "$(readlink -f "${relative}")"
}

function plusx {
    #echo -e $(find $1 -iregex ".*$2.*")
    dest=${HOME}/bin/$(basename $1)
    abs=$(abspath "$1")
    [ -e ${dest} ] || lnabs ${abs} ${dest}
    chmod +x $1
    #re_source
}

function xargsn {
    xargs -d'\n' -L 1 $*
}
#http://superuser.com/questions/150117/how-to-get-parent-pid-of-a-given-process-in-gnu-linux-from-command-line
ppid () { ps -p ${1:-$$} -o ppid=; }
# http://www.cyberciti.biz/faq/linux-random-password-generator/

function genpasswd {
    local l=$1;
    [ "$l" == "" ] && l=16;
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs;
}

function test_port	{
    HOST="${1}"
    PORT="${2}"
    # http://stackoverflow.com/questions/9609130/quick-way-to-find-if-a-port-is-open-on-linux
    # echo -e "GET / HTTP/1.0\n" >&6
    # cat <&6
    exec 6<>/dev/tcp/"${HOST}/${PORT}"
}

function straceall {
    set -x
    NAME="${1}"
    shift
    strace $* $(pidof "${NAME}" | sed 's/\([0-9]*\)/-p \1/g')
}

function affexact {
    apt-file find "${1}"| grep "/${1}$"
}

function durec	{
    du -ah --max-depth 1 $1 | sort -h
}

function dedup_path	{
    export PATH=$(echo ${PATH} | tr : '\n' | sort | uniq)
}

function append_path	{
    export PATH=$PATH:$1
}

function shred_rec	{
    for FN in $*; do
	read -p "rec shred ${FN}?"
	if test -d "${FN}"; then
	    find "${FN}" -type f -exec shred -zuf {} \;
	    find "${FN}" -depth -type d -exec rmdir {} \;
	else
	    shred -zufn10 "${FN}"
	fi
    done
}

function is_newline_terminated	{
    LAST_CHAR=$(tail -c1 "${1}")
    test -z "${LAST_CHAR}"
}

function gitignore_append	{
    echo "${1}" >> .gitignore
}

function apt_rdepends_r_installed	{
    sudo apt-rdepends -r "${1}" --state-{follow,show}=Installed
}

function git-delete-merged-branches	{
    git branch --merged | g -v '^[*]\|master' | xargs -L 1 git branch -d
}

function git-push-current-branch	{
    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    # REMOTE=${1:-origin}
    REMOTE="${1}"
    shift
    git push "${REMOTE}" "${BRANCH}" ${*}
}

function git-review-pull-request	{
    ORIG_HEAD=$(git rev-parse --abbrev-ref HEAD)

    if grep '[.]\{2\}' > /dev/null <<< "${1}"; then
	SPLIT=$(sed 's/[.]\{2\}/\t/g' <<< "${1}")
	FROM_BRANCH=$(cut -f1 <<< "${SPLIT}")
	TO_BRANCH=$(cut -f2 <<< "${SPLIT}")
	shift
    else
	FROM_BRANCH=${1:-origin/master}
	TO_BRANCH=${2:-${ORIG_HEAD}}
	shift 2
    fi

    CMD=${1}
    if test -z "${FROM_BRANCH}" || test -z "${TO_BRANCH}"; then
	echo "usage: git-review-pull-request from-branch to-branch"
	# exit 1
	return
    fi
    HASHES=$(git log --reverse "${FROM_BRANCH}".."${TO_BRANCH}"  --pretty=format:"%h")
    COUNTER=1
    TOTAL=$(wc -l <<< "${HASHES}")
    FAILED=""

    for HASH in $(tr '\n' ' ' <<< ${HASHES}); do

	if test -n "${CMD}"; then
	    git checkout ${HASH}
	    ${CMD} &> /dev/null &
	    COMPILE_CMD_PID=$!
	fi

	{ echo -e "------ON COMMIT ${COUNTER}/${TOTAL} (hash: ${HASH})------\n";\
	  git show ${HASH} -p --stat --color;\
	}  | less -R;
	COUNTER=$((COUNTER + 1))

	if test -n "${CMD}"; then
	    wait ${COMPILE_CMD_PID}
	    if test $? -ne 0; then
		FAIL="${HASH}: $(git log -1 --pretty=format:%s ${HASH})"
		FAILED="${FAILED}\n${FAIL}"
		echo ${FAIL}
		read -p'failure: '
	    fi
	fi
    done
    git checkout ${ORIG_HEAD}
    if test -n "${FAILED}"; then
	echo -e "${FAILED}"
    elif test -n "${CMD}"; then
	echo "BUILD SUCCESS on every commit!"
    fi
}

function pid-listening-at	{
    LINE=$(sudo netstat -tlpn 2>/dev/null | grep "[^0-9]${1}[^0-9]")
    PID=$(grep -o '[0-9]*/' <<< "${LINE}" | cut -f1 -d/)
    echo -e "${LINE}\n" 1>&2
    ps -fp ${PID} -w 30 1>&2
    echo ${PID}
}

function git-browse-remote	{
    REMOTE="${1:-origin}" && shift
    URL=$(git config --get "remote.${REMOTE}.url" |  \
	      sed -e 's|:|/|g' -e 's|^\(ssh///\)\?git@|https://|')
    firefox-new-tab "${URL}"
}
# completion with remotes
__git_complete git-browse-remote _git_pull

function cert-fetch	{
    HOSTPORT=${1} && shift
    PEM=/tmp/last-cert.pem
    openssl s_client -showcerts -connect ${HOSTPORT}  \
	    2>/dev/null  \
	    < /dev/null \
	    > ${PEM}

    openssl x509 -in ${PEM} -text -fingerprint | less
    echo ${PEM}
}

function gpom	{
    {
	git push origin master &>/dev/null
	LAST=$?
	test 0 -eq $LAST || echo "gpom failed with $LAST !"
    } &
}
