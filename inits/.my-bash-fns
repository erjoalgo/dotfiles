#!/bin/bash
function find-iregex {
    find ${PWD} -iregex ".*$*.*"
}

function find-name {
    DIR=${1} && shift
    find "${DIR}" -name ${*}
}

function abspath {
     echo $(readlink -f "${1}")
}

function lnabs {
    #http://stackoverflow.com/questions/4187210/convert-relative-symbolic-links-to-absolute-symbolic-links
    relative=$1
    shift
    ln -sf "$(readlink -f "${relative}")" "$*"
}

function lnabs_t {
    target=$1
    relative=$2
    shift
    shift
    ln -s -t ${target} "$(readlink -f "${relative}")"
}

function plusx {
    #echo -e $(find $1 -iregex ".*$2.*")
    dest=${HOME}/bin/$(basename $1)
    abs=$(abspath "$1")
    [ -e ${dest} ] || lnabs ${abs} ${dest}
    chmod +x $1
    #re_source
}

function xargsn {
    xargs -d'\n' -L 1 $*
}
#http://superuser.com/questions/150117/how-to-get-parent-pid-of-a-given-process-in-gnu-linux-from-command-line
ppid () { ps -p ${1:-$$} -o ppid=; }
# http://www.cyberciti.biz/faq/linux-random-password-generator/

function genpasswd {
    local l=$1;
    [ "$l" == "" ] && l=16;
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs;
}

function xclip-tee  {
    # replicate clipboard selection to primary, then echo it
    xclip -o -selection clipboard | xclip -i -selection primary
    xclip -o -selection primary
}

function pgen	{
    # pass flags through to the pass subcommand
    # add the -c, -n flags by default
    local FLAGS="--clip --no-symbols"
    local OPTIND OPT a
    while getopts "hncif" OPT; do
        case ${OPT} in
            *)
                FLAGS+=" -${OPT}"
                ;;
            h)
                FLAGS+=" --help"
                ;;
        esac
    done
    shift $((OPTIND -1))
    NAME=${1} && shift
    LENGTH=${1:-10} && shift
    pass generate ${FLAGS} ${NAME} ${LENGTH} || return
    xclip-tee
}

function pshow  {
    pass show -c ${*}
    xclip-tee
}
complete-alias _pass pshow pass show
complete-alias _pass pgen pass generate


function passgen-allow-special	{
    SPECIAL_FLAG=" " passgen ${*}
}


function passgen-pin	{
    NAME=${1} && shift
    LENGTH=""
    LENGTH=${LENGTH:-4}
    PIN=$(tr -dc 0-9 < /dev/urandom | head -c ${LENGTH})
    echo ${PIN} | pass insert --echo ${NAME}
    echo -n ${PIN} | xclip -i -selection clipboard
    xclip -o -selection primary
}

function pass-show-xs	{
  PASS_PATH=${1} && shift
  pass show ${PASS_PATH} | xs
}


function test-port	{
    HOST="${1}"
    PORT="${2}"
    # http://stackoverflow.com/questions/9609130/quick-way-to-find-if-a-port-is-open-on-linux
    # echo -e "GET / HTTP/1.0\n" >&6
    # cat <&6
    exec 6<>/dev/tcp/"${HOST}/${PORT}"
}

function test-local-port	{
    test-port localhost ${*}
}

function beep-on-success {
    until ${*}; do
        sleep 1
    done
    beep
    beep
    beep
    xmessage "success of ${*}"
}

function straceall {
    set -x
    NAME="${1}"
    shift
    strace $* $(pidof "${NAME}" | sed 's/\([0-9]*\)/-p \1/g')
}

function affexact {
    apt-file find "${1}"| grep "/${1}$"
}

function durec	{
    du -ah --max-depth 1 $1 | sort -h
}

function dedup_path	{
    export PATH=$(echo ${PATH} | tr : '\n' | sort | uniq)
}

function append_path	{
    export PATH=$PATH:$1
}

function shred-rec	{
    for FN in $*; do
	read -p "rec shred ${FN}?"
	if test -d "${FN}"; then
	    find "${FN}" -type f -exec shred -zuf {} \;
	    find "${FN}" -type l -exec unlink {} \;
	    find "${FN}" -depth -type d -exec rmdir {} \;
	elif test -L "${FN}"; then
            unlink "${FN}"
	else
	    shred -zufn10 "${FN}"
	fi
    done
}

function is_newline_terminated	{
    LAST_CHAR=$(tail -c1 "${1}")
    test -z "${LAST_CHAR}"
}

function gitignore-append-commit	{
    for IGNORE in ${*}; do
	echo ${IGNORE} >> .gitignore
    done
    git add .gitignore
    git commit -m "gitignore ${1}"
}

function apt_rdepends_r_installed	{
    sudo apt-rdepends -r "${1}" --state-{follow,show}=Installed
}

function git-delete-merged-branches	{
    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    git branch --merged | grep -vF "${BRANCH}" | xargs -L 1 git branch -d
}

function git-push-current-branch	{
    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    REMOTE=${1:-origin} && shift
    git push "${REMOTE}" "${BRANCH}" ${*}
}
__git_complete git-push-current-branch _git_pull

function git-review-pull-request	{
    ORIG_HEAD=$(git rev-parse --abbrev-ref HEAD)

    if grep '[.]\{2\}' > /dev/null <<< "${1}"; then
	SPLIT=$(sed 's/[.]\{2\}/\t/g' <<< "${1}")
	FROM_BRANCH=$(cut -f1 <<< "${SPLIT}")
	TO_BRANCH=$(cut -f2 <<< "${SPLIT}")
	shift
    else
	FROM_BRANCH=${1:-origin/master} && shift
	TO_BRANCH=${1:-${ORIG_HEAD}} && shift
    fi

    if test -z "${CMD}"; then
	# NOLESS only makes sense with a command
	NOLESS=''
    fi

    if test -z "${FROM_BRANCH}" || test -z "${TO_BRANCH}"; then
	echo "usage: git-review-pull-request from-branch to-branch"
	# exit 1
	return
    fi
    HASHES=$(git log --reverse "${FROM_BRANCH}".."${TO_BRANCH}"   \
		 --pretty=format:"%h")
    COUNTER=1
    TOTAL=$(wc -l <<< "${HASHES}" | tr -d ' ')
    FAILED=""

    for HASH in $(tr '\n' ' ' <<< ${HASHES}); do

	if test -n "${CMD}"; then
	    git checkout ${HASH}
	    ${CMD} &> /dev/null &
	    COMPILE_CMD_PID=$!
	fi

	if test -z "${NOLESS}"; then
	    { echo -e "------ON COMMIT ${COUNTER}/${TOTAL} (hash: ${HASH})------\n";\
	      git show ${HASH} -p --stat --color;\
	      }  | less -R;
	fi

	COUNTER=$((COUNTER + 1))

	if test -n "${CMD}"; then
	    wait ${COMPILE_CMD_PID}
	    if test $? -ne 0; then
		FAIL="${HASH}: $(git log -1 --pretty=format:%s ${HASH})"
		FAILED="${FAILED}\n${FAIL}"
		${CMD}
		echo ${FAIL}
		echo -p"failure (${CMD}): "
		notify-send "FAILURE (${CMD}): "
		bash
		read -p"cont (q: quit)? : " CONT
		if test "${CONT}" = q; then
		    git checkout ${ORIG_HEAD}
		    return
		fi
	    fi
	fi
    done
    git checkout ${ORIG_HEAD}
    if test -n "${FAILED}"; then
	echo -e "${FAILED}"
    elif test -n "${CMD}"; then
	echo "BUILD SUCCESS on every commit!"
    fi
}

function pid-listening-at-port	{
    LINE=$(sudo netstat -tlpn 2>/dev/null | grep "[^0-9]${1}[^0-9]")
    if test -n "${LINE}"; then
        PID=$(grep -o '[0-9]*/' <<< "${LINE}" | cut -f1 -d/)
        echo -e "${LINE}\n" 1>&2
        xargs -L1 ps -w30 -fp <<< "${PID}"  1>&2
        echo ${PID}
    fi
}

function ports-open-by-pid  {
  PID=${1} && shift
  sudo lsof -Pan -p ${PID} -i
}

function git-browse-remote	{
    REMOTE="${1:-origin}" && shift
    URL=$(git config --get "remote.${REMOTE}.url" |  \
	      sed -e 's|:|/|g' -e 's|^\(ssh///\)\?git@|https://|')
    echo ${URL}
    x-www-browser "${URL}"
}
# completion with remotes
__git_complete git-browse-remote _git_pull

function cert-fetch	{
    HOSTPORT=${1} && shift
    PEM=/tmp/last-cert.pem
    openssl s_client -showcerts -connect ${HOSTPORT}  \
	    2>/dev/null  \
	    < /dev/null \
	    > ${PEM}

    openssl x509 -in ${PEM} -text -fingerprint | less
    echo ${PEM}
}

function gpom	{
    REMOTE=${1:-origin} && shift
    BRANCH=${1:-$(git rev-parse --abbrev-ref HEAD 2> /dev/null)} && shift
    (
	GIT_TERMINAL_PROMPT=0 git push ${REMOTE} ${BRANCH} &>/dev/null </dev/null
	LAST=$?
	if test 0 -ne $LAST; then
	    echo
	    echo "gpom failed with $LAST!"
	    set -x
	    GIT_TERMINAL_PROMPT=0 git push ${REMOTE} ${BRANCH}
	    set +x
	fi
    ) &
    disown %-
}
__git_complete gpom _git_pull #complete by remote

function mvbk	{
    mv ${1} ${1}.bak
}

function bkmv	{
    mv ${1} $(dirname ${1})/$(basename ${1} .bak)
}

function grvv	{
    REMOTE=${1:-origin} && shift
    git config --get remote.${REMOTE}.url
}
__git_complete grvv _git_pull

function git-remote-exists	{
    REMOTE=${1} && shift
    git config remote.${REMOTE}.url > /dev/null
}

function git-promote-remote-to-origin	{
    EXISTING=${1} && shift
    if test -z "${EXISTING}" || ! git-remote-exists ${EXISTING}; then
	echo "error: remote ${EXISTING} doesn't exist"
    else
	if git-remote-exists origin; then
	    # rename origin
	    OLD_ORIGIN_NEW_NAME=${1:-old-origin} && shift

	    if git-remote-exists ${OLD_ORIGIN_NEW_NAME}; then
		echo "error: provide a new name for origin"
		return
	    else
		git remote rename origin ${OLD_ORIGIN_NEW_NAME}
	    fi
	fi
	git remote rename ${EXISTING} origin
    fi
}
__git_complete git-promote-remote-to-origin _git_pull

function ps-tree	{
    CURR=${1}
    while test ${CURR} != 1; do
	ps -fp ${CURR}
	CURR=$(ps -o ppid= -p ${CURR})
    done
}

function gg    {
    git grep ${*} $(git rev-list --all)
}

function git-merge-base-show    {
    git show $(git merge-base ${*})
}

function git-filter-branch-rewrite-path-sed    {
    SED_EXP=${1} && shift
    git filter-branch -f --index-filter '
  git ls-files -s | sed "${SED_EXP}" |
  GIT_INDEX_FILE=$GIT_INDEX_FILE.new git update-index --index-info &&
  mv $GIT_INDEX_FILE.new $GIT_INDEX_FILE
' HEAD
}

function path-append {
  export PATH=${PATH}:${1}
}

function path-ls {
  tr ':' '\n' <<< "${PATH}" | less
}

function current-shell-window-visible-p {
  #  TODO make this more robust
  [[ -n "${WINDOWID}" &&  \
    ! "$(emacsclient -e '(stumpwm-visible-window-ids)')" = *"${WINDOWID}"* ]]
}

_NOTIFY_LAST_COMMAND_THRESH_SECS=10
function stumpwm-maybe-notify-last-command {
    local RET=${1} && shift
    local CMD=${1} && shift

    ELAPSED_TIME_SECS=${1} && shift

    if test ${RET} = 0; then
      MSG="Process completed successfully"
      COLOR="green"
    else
      MSG="Process erred"
      COLOR="red"
    fi
    if test $ELAPSED_TIME_SECS -gt ${_NOTIFY_LAST_COMMAND_THRESH_SECS} ; then
        # enough time has elapsed, send a notification
        # remove leading tab from CMD
        notify-send-stumpwm -m "${MSG}: $(cut -f2- <<< ${CMD})" -c ${COLOR}
    fi
}

function _command-start-time-set-maybe {
  _COMMAND_START_TIME=${_COMMAND_START_TIME:-${SECONDS}}
}

function post-command-maybe-notify {
    local RET=$?
    local CMD=$(fc -ln -0)
    ELAPSED_TIME_SECS=$(expr ${SECONDS} - ${_COMMAND_START_TIME:-${SECONDS}})
    unset _COMMAND_START_TIME
    history -a
    stumpwm-maybe-notify-last-command ${RET} "${CMD}" ${ELAPSED_TIME_SECS} &> /dev/null &
    disown %- # silence shell job status
}

if command -v notify-send-stumpwm >/dev/null \
  && notify-send-stumpwm -m "connected to $(hostname)" -c green; then
  PROMPT_COMMAND=post-command-maybe-notify
  trap '_command-start-time-set-maybe' DEBUG
else
  1>&2 echo "WARN: not enabling notifications"
fi

function jar-to-classes {
    for JAR in ${*}; do
        for CLASS in $(jar -tf ${JAR}); do
            echo ${JAR} "-\>" ${CLASS}
        done
    done
}

function keynav-restart {
  pkill keynav
  keynav &
  disown %- # silence shell job status
}

function git-revert-HEAD {
    git revert ${1:-HEAD}
}

function asdf-system-installed-p {
    SYSTEM=${1} && shift
    sbcl --eval "(ql:quickload '${SYSTEM})" --non-interactive
}

function pidof-ls-open-files  {
  PROCNAME=${1} && shift
  for PID in $(pidof ${PROCNAME}); do
    ls -l /proc/${PID}/fd
  done
}

function strace-cmd  {
  OUT=${OUT:-/tmp/strace-out.log}
  strace -f ${*} |& tee ${OUT}
  echo "wrote to ${OUT}"
  less ${OUT}
}

complete -F _command strace-cmd

function tmux-attach  {
  if test 1 = $(tmux list-session | wc -l); then
     tmux attach -d
  else
     tmux list-sessions
     read -p"select session: " SESSNO
     tmux attach -dt $SESSNO
  fi
}

function gitignore-dirlocals  {
  pushd .
  cdgittop
  cat <<EOF >> .gitignore
**/.dir-locals.el
**/.gitignore
EOF
  git add -f .gitignore
  git commit -m "ignore .dir-locals.el"
  popd
}

function gitignore-README-md-html	{
  gitignore-append-commit '**/README.md' '**/README.html'
}

function emacs-attach-loop  {
  for PID in $(pidof emacs); do
    kill -SIGUSR1 "${PID}"
    echo "attaching to emacs with pid ${PID}... use 'C-x 5 0' to detach"
    emacsclient -nw -c
  done
}

function ec-which {
  PROGRAMS=${1} && shift
  emacsclient -n $(which ${PROGRAMS})
}
complete -F _command ec-which

function __md5-directory-cmd  {
    DIR=${1} && shift
    if ! grep : <<< "${DIR}"; then
        echo "${DIR}"
    else
        LABEL=$(cut -f1 -d: <<< "${DIR}")
        DIR_PATH=$(cut -f1 -d: <<< "${DIR}")
        echo "ssh ${LABEL} md5-directory-diff ${DIR_PATH}"
    fi
}

function md5-directory-diff  {
    DIR1=${1} && shift
    DIR2=${1} && shift
    diff <(__md5-directory-cmd "${DIR1}") <(__md5-directory-cmd "${DIR2}")
}

function sshfs-mount  {
    MNT_SPEC=${1} && shift
    if ! grep ':' <<< "${MNT_SPEC}"; then
        MNT_SPEC+=":"
    fi
    MNT_LABEL=$(cut -f1 -d: <<< "${MNT_SPEC}")
    MNT_REMOTE=$(cut -f2 -d: <<< "${MNT_SPEC}")
    test -n "${LABEL}" || return
    MNT_LOCAL=${MNT_LOCAL:-${HOME}/mnt/${LABEL}}
    mkdir -p "${MNT_LOCAL}" || return
    sshfs "${MNT_LABEL}:${MNT_REMOTE}" ${MNT_LOCAL} || return
    echo "mounted ${LABEL} on ${MNT_LOCAL}"
}

function git-cherry-pick-interactive  {
  RANGE=${1} && shift
  TMP=$(mktemp -p /tmp git-cherry-pick-interactive-XXXX)
  git log "${RANGE}" --oneline > "${TMP}" || return
  ${VISUAL} "${TMP}" || return
  git cherry-pick $(cut -f1 -d' ' "${TMP}")
}
__git_complete git-cherry-pick-interactive _git_cherry_pick

function git-delete-review-dangling-commits () {
    if ! git status; then
        echo "not in a git repository";
        return;
    fi;
    if ! git diff HEAD --exit-code; then
        echo "changes present. aborting...";
        return;
    fi;
    for SHA in $(git fsck --no-reflogs |  \
                     grep -Fv "dangling blob" |  \
                     sed "s/^dangling \(commit\|blob\) //g");
    do
        echo "considering ${SHA}";
        git cherry-pick -n "${SHA}";
        if git --no-pager diff HEAD --exit-code; then
            echo "dangling ${SHA} is safe to delete";
        else
            echo "rec. edit";
            bash;
            git reset . || return;
            git checkout -f . || return;
            read -p"cont (q: quit)? : " CONT;
            test "${CONT}" != q || return;
        fi;
    done
}

function git-delete-prune-dangling-commits  {
    read -p"confirm permanent prune of dangling commits: "
    git reflog expire --expire-unreachable=now --all;
    git gc --prune=now
}

function git-patch-cross-repo  {
    # based on https://stackoverflow.com/a/11426261/1941755
    # usage: git-patch-cross-repo <OTHER_REPO> [./path/to/file1 ./path/to/file2 ...]
    OTHER_REPO=${1} && shift
    git log --pretty=email --patch-with-stat --reverse -- ${*} |  \
        (cd ${PTHER_REPO} && git am)
}
