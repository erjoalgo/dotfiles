(defpackage DBG
  (:use common-lisp)
  (:export
   prin
   echo
   describe-hash-table
   unintern-shadowing-symbols
   unexport-all-symbols
   sort-by
   lookup-thread
   lookup-terminate-thread))

(in-package #:DBG)

(defun prin (obj)
  (loop with class = (class-of obj)
     for slot in (sb-mop:class-slots class)
     as slot-name = (slot-value slot 'sb-pcl::name)
     as slot-value = (if (SLOT-BOUNDP obj slot-name)
                         (slot-value obj slot-name)
                         :UNBOUND)
     collect (list slot-name slot-value)))

(defun describe-hash-table (table)
  (loop for k being the hash-keys of table
      collect (cons k (gethash k table))))

(defun unintern-shadowing-symbols (&optional pkg)
  (setf pkg (or pkg *package*))
  (let ((syms (package-shadowing-symbols pkg)))
    (dolist (sym syms) (unintern sym pkg))
    (format t "uninterned ~D shadowing symbols ~%"
            (length syms))))

(defun unexport-all-symbols (&optional pkg)
  (setf pkg (or pkg *package*))
  (do-external-symbols (sym pkg)
    (unexport sym pkg)))

(defun sort-by (list pred &rest args)
  (apply #'sort list (lambda (a b)
                       (< (funcall pred a)
                          (funcall pred b)))
         args))

(defun substringp (needle haystack &key (test 'char=))
  ;; https://stackoverflow.com/questions/34620352/34620827#34620827
  "Returns the index of the first occurrence of the string designated
by NEEDLE within the string designated by HAYSTACK, or NIL if it does
not occur.  Characters within the string are compared by TEST, which
defaults to CHAR= (for case-sensitive comparison)."
  (search (string needle)
          (string haystack)
          :test test))

(defun lookup-thread ()
  (let ((threads (sb-thread:list-all-threads)))
  (loop
     for thread in threads
     for i from 0
       do (format t "~A: ~A: ~%" i thread))
  (format t "~%~%enter thread index: ")
  (let* ((line (read-line))
        (idx (parse-integer line)))
    (nth idx threads))))


(defun lookup-terminate-thread ()
  (let ((thread (lookup-thread)))
     (sb-thread:terminate-thread thread)))

;; Local Variables:
;; mode: lisp
;; End:
