#!/usr/bin/env python3

import argparse
import glob
import logging
import os
import re
import requests
import requests_unixsocket
import select
import socket
import subprocess
import sys

def socket_open_tcp(port: int):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  result = sock.connect_ex(("localhost",port))
  sock.close()
  return result == 0


def socket_open_unix(unix_socket: str):
  sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  result = sock.connect_ex(unix_socket)
  sock.close()
  return result == 0

def peek_string(s: str, peek: int):
    if len(s) <= peek:
        return s
    return f"{s[:peek]}..."

def x_service_curl(specs: list, path: str, headers: dict[str:str], data: bytes):
  return_code = None
  for spec in specs:
    if isinstance(spec, int):
        port = spec
        if not socket_open_tcp(port):
            continue
        url = f"http://127.0.0.1:{port}{path}"
        session = requests.Session()
    else:
        socket_addr = spec
        if not socket_open_unix(socket_addr):
            continue
        host_encoded = socket_addr.replace("/", "%2F")
        url = f"http+unix://{host_encoded}{path}"
        session = requests_unixsocket.Session()
    method = "POST" if data else "GET"
    logging.debug(f"{method} {url}" +
                  (f" <<< {peek_string(data, 100)}" if data else ""))

    req = requests.Request(method, url, headers=headers, data=data)
    try:
        prepared = req.prepare()
        resp = session.send(prepared)
    except Exception as ex:
        logging.error("failed to send to %s: %s", url, ex)
        continue
    return_code = resp.status_code
    if resp.status_code != 200:
        logging.error(resp.text)
    else:
        print(resp.text)
    break

  if return_code is None:
      raise Exception(f"no ports or sockets found: {specs}")
  else:
      return return_code

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument("path", help="the x-service URL path")
  parser.add_argument("-d", "--data", help = "the literal data")
  parser.add_argument("-f", "--file", action="store_true",
                      help = "read data from the given filename")
  parser.add_argument("-i", "--stdin", action="store_true",
                      help = "read POST data from stdin")
  parser.add_argument("-H", "--headers", nargs="+", default=[],
                      action="append",
                      help = "list of headers as KEY:VALUE pairs")
  parser.add_argument("-s", "--sockets", nargs="+", default=[],
                      help = "override the list of unix socket paths to use")
  parser.add_argument("-v", "--verbose", action="store_true",
                      help = "verbose logging")

  args=parser.parse_args()

  if args.file:
      with open(args.file, "r") as fh:
          data = fh.read()
  elif args.data:
      data = args.data.encode()
  elif args.stdin:
      data = sys.stdin.buffer.read()
  else:
      data = None

  if args.verbose:
      logging.basicConfig(level=logging.DEBUG)
  else:
      logging.basicConfig(level=logging.WARN)

  headers = dict(((name, val) for (name, val)
                  in os.environ.items()
                  if name.startswith("STUMPWM")))

  for header_arg in args.headers:
      if len(header_arg) == 2:
          k, v = header_arg
      else:
          m = re.match("(.*?):(.*)", header_arg[0])
          k, v = m.groups()
      headers[k] = v

  sockets = args.sockets or glob.glob("/tmp/.x-service-*.sock") + [1958, 1959]

  status_code = x_service_curl(sockets, args.path, headers, data)
  if status_code//100 == 2:
      return 0
  return status_code

if __name__ == "__main__":
  exit(main())

# Local Variables:
# mode: python
# End:
