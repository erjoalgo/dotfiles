#!/usr/bin/python3

# insert-text-block ---

# Copyright (C) 2018 Ernesto Alfonso <erjoalgo@gmail.com>

# Author: Ernesto Alfonso <erjoalgo@gmail.com>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Insert a block of text into a (config) file."""

from __future__ import print_function

import argparse
import os
import re
import sys

parser = argparse.ArgumentParser()
parser.add_argument("block_id", help="universally unique line")
parser.add_argument("filename", help="input/output file")
parser.add_argument("-b", "-P", "--prepend",  action="store_true",
                    # using -P instead of -p for backwards compatibility
                    # and avoiding flag conflicts
                    help="preppend instead of append")
parser.add_argument("-l", "--line_index",  type=int,
                    help="insert the text at the N-th line")
parser.add_argument("-r", "--after_regexp",  type=str,
                    help="insert the text after the first ocurrence of regexp")
parser.add_argument("-o", "--output", help="specify a different output file")
parser.add_argument("-n", "--keep_newline",  action="store_true",
                    help="don't strip trailing newline from stdin")
parser.add_argument("-p", "--parents", help="make parent directories",
                    action="store_true")
parser.add_argument("-e", "--echo", help="echo contents to stdout",
                    action="store_true")
parser.add_argument("-s", "--skip_closing_newline",
                    help="skip adding newline at the end of a file",
                    action="store_true")
parser.add_argument("-d", "--delete",
                    help="delete the entire block, including header lines",
                    action="store_true")


def mkdir_parents(path):
    """Recursively make directories in path."""
    if not os.path.exists(path):
        mkdir_parents(os.path.dirname(path))
        os.mkdir(path)


def main():
    args = parser.parse_args()
    if not args.delete:
        block_contents = sys.stdin.read()
    else:
        block_contents = None
    if not args.keep_newline and block_contents and block_contents[-1]=="\n":
        block_contents = block_contents[:-1]

    if not os.path.exists(args.filename) and not args.filename.startswith("/dev/fd"):
        if args.parents:
            mkdir_parents(os.path.dirname(args.filename))
        with open(args.filename, "w") as fh:
            pass

    output_filename = args.output or args.filename
    if output_filename == "-":
        output_filename = "/dev/stdout"

    with open(args.filename, "r") as fh:
        original_text = fh.read()

    new_text = insert_text_block(
        original_text, args.block_id, block_contents,
        prepend = args.prepend,
        line_index = args.line_index,
        after_regexp = args.after_regexp,
        delete = args.delete,
        skip_closing_newline = args.skip_closing_newline)

    with open(output_filename, "w") as fh:
        fh.write(new_text)

    if args.echo:
        print(new_text)


def partition_text_by_block_id(original_text, block_id):
    """
    Try to partition the text into before/after a block with the given id.
    Returns a 3-tuple: (before_text, block_text, after_text)
    If block id is not found, returns (original_text, "", "")
    """
    regexp = "(?sm)^(.*?)(\n*^{0}\n.*{0}$\n*)(.*)$".format(re.escape(block_id))
    match = re.match(regexp, original_text)
    if match:
        before, middle, after = match.group(1), match.group(2), match.group(3)
        return before, middle, after
    return original_text, "", ""



def split_text_at_line_index(old_before, old_after, line_index):
    """Split the before-and-after text at the given line index.
       Returns a two-tuple: (new_before, new_after)
    """
    lines_before = old_before.split("\n") if old_before else []
    lines_after = old_after.split("\n") if old_after else []
    new_before = "\n".join(lines_before[:line_index])
    yet_to_skip = 0
    if line_index > len(lines_before):
        yet_to_skip = line_index - len(lines_before)
    new_after = "\n".join(lines_before[line_index:] + lines_after[yet_to_skip:])
    return new_before, new_after


def insert_text_block(original_text,
                      block_id,
                      block_contents,
                      prepend=False,
                      line_index=None,
                      after_regexp=None,
                      delete=False,
                      skip_closing_newline=False):
    old_before, middle, old_after = partition_text_by_block_id(original_text, block_id)

    if delete:
        assert block_contents is None
        block = None
        if not middle:
            print(f"warn: no block found to delete! block_id='{block_id}'",
                  file = sys.stderr)
    else:
        block = "\n".join((block_id, block_contents, block_id))

    if prepend:
        assert not line_index
        line_index = 0
    if after_regexp:
        old = "\n".join((old_before, old_after))
        m = re.search(f"(?m){after_regexp}", old)
        assert m, f"after_regexp: '{after_regexp}' not found in file!\n{old}"
        start = m.start(0)
        lines_before = sum(c == '\n' for c in old[:start])
        line_index = lines_before + 1
    if delete:
        new_before, new_after = old_before, old_after
    if line_index is not None:
        new_before, new_after = split_text_at_line_index(old_before, old_after, line_index)
    else:
        new_before, new_after = old_before, old_after

    if block:
        # add a newline around block to improve readability
        if new_before and new_before[-1] != "\n": # don't prepend newline to empty file
            block = "\n" + block
        if new_after: # don't append newline at the end of file
            block = block + "\n"

    new_text = "\n".join(b for b in (new_before, block, new_after) if b)

    if not skip_closing_newline and new_text and new_text[-1] != "\n":
        new_text += "\n"

    return new_text


if __name__ == "__main__":
    main()

# Local Variables:
# mode: python
# compile-command: "./insert-text-block '# 07b37c2c-a63f-11e7-94e3-cff9e57fa83f' /tmp/test  <<< some-text-to-insert"
# End:
