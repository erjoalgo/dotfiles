#!/usr/bin/python3

# insert-text-block ---

# Copyright (C) 2018 Ernesto Alfonso <erjoalgo@gmail.com>

# Author: Ernesto Alfonso <erjoalgo@gmail.com>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Insert a block of text into a (config) file."""

from __future__ import print_function

import argparse
import os
import re
import sys

parser = argparse.ArgumentParser()
parser.add_argument("block_id", help = "universally unique line")
parser.add_argument("filename", help = "input/output file")
parser.add_argument("-b", "--begining_append",  action="store_true",
                    help = "preppend instead of append")
parser.add_argument("-l", "--line",  type = int,
                    help = "skip the first N lines of the file, then insert")
parser.add_argument("-o", "--output", help = "specify a different output file")
parser.add_argument("-n", "--no_strip_newline",  action="store_true",
                    help = "don't strip trailing newline from stdin")
parser.add_argument("-N", "--skip_separating_line",  action="store_true",
                    help = "skip adding a separating newline when file exists and is not empty")
parser.add_argument("-p", "--parents", help = "make parent directories",
                    action="store_true")
parser.add_argument("-e", "--echo", help = "echo contents to stdout",
                    action="store_true")

args=parser.parse_args()

stdin=sys.stdin.read()
if not args.no_strip_newline and stdin and stdin[-1]=="\n":
    stdin=stdin[:-1]
block="\n".join((args.block_id, stdin, args.block_id))
if not args.filename.startswith("/dev/fd") and not os.path.exists(args.filename):
    if args.parents:
        def mkparent(path):
            """Recursively make directories in path."""
            if not os.path.exists(path):
                mkparent(os.path.dirname(path))
                os.mkdir(path)
        mkparent(os.path.dirname(args.filename))

    with open(args.filename, "w") as fh:
        pass

orig_text = open(args.filename).read()
output = args.output or args.filename
if output=="-":
    output = "/dev/stdout"


def before_middle_after(original_text, block_id):
    # try to find an existing block with the given block id
    # partition the file into the text before and after the block

    regexp="(?sm)^(.*?)(\n*{0}.*{0}\n*)(.*)$".format(re.escape(block_id))
    match=re.match(regexp, original_text)
    if match:
        return match.group(1), match.group(2), match.group(3)
    return original_text, "", ""

old_before, _, old_after = before_middle_after(orig_text, args.block_id)

if args.begining_append:
    args.line = 0

if args.line is not None:
    lines_before = old_before.split("\n")
    lines_after = old_after.split("\n")

    new_before = "\n".join(lines_before[:args.line])
    yet_to_skip = max(0, len(lines_before) - args.line)
    new_after = "\n".join(lines_before[args.line:] + lines_after[yet_to_skip:])
else:
    new_before, new_after = old_before, old_after

if not args.skip_separating_line:
    if new_before:
        block = "\n" + block
    if new_after:
        block = block + "\n"

new_text="\n".join(b for b in (new_before, block, new_after) if b)

with open( output, "w") as fh:
    fh.write(new_text)

if args.echo:
    print(new_text)

# Local Variables:
# mode: python
# compile-command: "./text-block '# 07b37c2c-a63f-11e7-94e3-cff9e57fa83f' test -b  <<< \"$(echo -e 'LINEA\\nLINEB')\""
# End:
